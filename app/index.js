Vue.component("weekday", {
  props: {
    date: {
      type: Date,
      default: function() {
        return new Date();
      }
    }
  },
  template: `
    <div class="weekday">{{ this.date.toLocaleString("ru-RU", {weekday: "long",month: "short",day: "numeric"}) }}</div>
  `
});

Vue.component("userpic", {
  props: {
    src: {
      type: String,
      default: "/img/placeholder.png"
    }
  },
  template: `
    <div class="userpic">
      <span class="userpic__img" :style="{ backgroundImage: 'url(' + src + ')' }"></span>
    </div>
  `
});

Vue.component("photo-attach", {
  data: function() {
    return {
      filename: ""
    };
  },
  template: `
    <div class="photo-attach">
      <label class="photo-attach__label">
        <span class="photo-attach__text">–§–æ—Ç–æ {{ filename ? '[' + filename + ']' : '' }}</span>
        <input
          class="photo-attach__input"
          type="file"
          accept="image/*"
          capture="user"
          @change="handleChange"
        >
      </label>
    </div>
  `,
  methods: {
    handleChange({ target }) {
      const file = target.files[0];

      if (!file) {
        this.filename = "";
        return;
      }

      this.filename = file.name;
      const reader = new FileReader();

      reader.onload = () => {
        this.$emit("change", reader.result);
      };
      reader.readAsDataURL(file);
    }
  }
});

Vue.component("oracle", {
  props: {
    prophecy: {
      type: Object,
      default: null
    },
    index: Number
  },
  data: function() {
    return {
      fulfilled: null,
      roll: null,
      text: null
    };
  },
  created: function() {
    this.renewState();
  },
  watch: {
    index() {
      this.renewState();
    },
    prophecy() {
      this.renewState();
    },
    fulfilled(curr, prev) {
      if (!curr) return;

      this.text = this.getRandomText();
      this.$emit("fulfilled", {
        roll: this.roll.map(item => item.emoji),
        text: this.text
      });
    }
  },
  template: `
    <div class="oracle" :class="{ oracle_fulfilled: fulfilled }" @click="handleClick">
      <div class="oracle__cell oracle__cell_for_roll">
        <button
          v-for="item in roll"
          class="oracle__button"
          :class="{ oracle__button_fulfilled: item.fulfilled }"
          :disabled="item.fulfilled"
          :data-index="item.id"
        >
          {{ item.emoji }}
        </button>
      </div>
      <div class="oracle__cell oracle__cell_for_prophecy">
        <div class="oracle__prophecy">{{ text }}</div>
      </div>
    </div>
  `,

  methods: {
    renewState() {
      const prophecy = this.prophecy;

      if (prophecy) {
        this.fulfilled = true;
        this.roll = prophecy.roll.map((emoji, i) => ({
          id: i,
          emoji,
          fulfilled: true
        }));
        this.text = prophecy.text;
      } else {
        this.fulfilled = false;
        this.roll = ["üßô‚Äç", "üßô‚Äç", "üßô‚Äç", "üßô‚Äç"].map((emoji, i) => ({
          id: i,
          emoji,
          fulfilled: false
        }));
        this.text = "–ü—Ä–∏–≤–µ—Ç, —Å—Ç—Ä–∞–Ω–Ω–∏–∫! –ó–≤–µ–∑–¥—ã –µ—â–µ –Ω–µ –æ—Ç–∫—Ä—ã–ª–∏ —Ç–µ–±–µ —Å–≤–æ–∏ —Ç–∞–π–Ω—ã.";
      }
    },

    handleClick({ target }) {
      if (!target.matches(".oracle__button")) {
        return;
      }

      const index = target.dataset.index;
      this.roll[index].emoji = this.getRandomEmoji();
      this.roll[index].fulfilled = true;
      this.fulfilled = this.roll.every(item => item.fulfilled);
    },

    getRandomEmoji() {
      const ranges = [
        [0x1f681, 0x1f6c5],
        [0x1f600, 0x1f636],
        [0x1f680, 0x1f6c0],
        [0x2702, 0x27b0],
        [0x1f601, 0x1f64f]
      ];
      const randRange = ranges[this._getRandom(0, ranges.length)];
      const randPoint = this._getRandom(randRange[0], randRange[1] + 1);

      return String.fromCodePoint(randPoint);
    },

    getRandomText() {
      const texts = [
        "–°–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–≤ —ç—Ç–æ—Ç –¥–µ–Ω—å ‚Äì –Ω–µ –º–µ–Ω—è–π—Ç–µ –ø–ª–∞–Ω–æ–≤. –û–Ω –±—É–¥–µ—Ç —É–¥–∞—á–µ–Ω –ª–∏—à—å –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤—ã —Å—Ç–∞–Ω–µ—Ç–µ —Å–ª–µ–¥–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –ø—É–Ω–∫—Ç –∑–∞ –ø—É–Ω–∫—Ç–æ–º.",
        "–í–∞—à–∏ —É—Å–∏–ª–∏—è –Ω–µ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –Ω–µ–∑–∞–º–µ—á–µ–Ω–Ω—ã–º–∏, –Ω–æ –±–æ–ª—å—à–æ–≥–æ —É—Å–ø–µ—Ö–∞ –Ω–µ –ø—Ä–∏–Ω–µ—Å—É—Ç. –ü—É—Å—Ç—å –≤–∞—à–∏ –¥–µ–ª–∞ –≥–æ–≤–æ—Ä—è—Ç —Å–∞–º–∏ –∑–∞ —Å–µ–±—è, –≤–∞–º –∂–µ –ª—É—á—à–µ –ø–æ–º–æ–ª—á–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è.",
        "–°–µ–≥–æ–¥–Ω—è –≤–∞–º –º–æ–∂–µ—Ç –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è —á—Ç–æ-—Ç–æ, —á–µ–º—É –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è. –í–ø—Ä–æ—á–µ–º, —ç—Ç–æ –≤—Ä—è–¥ –ª–∏ —Å–º–æ–∂–µ—Ç –≤–∞—Å –Ω–∞–ø—É–≥–∞—Ç—å, –≤–µ–¥—å –ø—Ä–∏–≤–∏–¥–µ–Ω–∏—è –Ω–µ –∫—É—Å–∞—é—Ç—Å—è.",
        "–ñ–∏–∑–Ω—å —Å–ª–æ–∂–Ω–∞, –Ω–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞, –∏ —Å–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –±—É–¥–µ—Ç –ø–æ–≤–æ–¥ —É–±–µ–¥–∏—Ç—å—Å—è –≤ —ç—Ç–æ–º –≤ –æ—á–µ—Ä–µ–¥–Ω–æ–π —Ä–∞–∑. –ü–æ–≤—Ä–µ–º–µ–Ω–∏—Ç–µ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏, –æ—Ç–≤–µ—Ç—ã –Ω–∞–π–¥—É—Ç—Å—è —Å–∞–º–∏.",
        "–ë—É–¥—å—Ç–µ —Å–µ–≥–æ–¥–Ω—è –¥–æ–±—Ä—ã–º –∏ –æ—Ç–∑—ã–≤—á–∏–≤—ã–º. –û–±—Ä–∞—â–∞–π—Ç–µ –ø–æ–±–æ–ª—å—à–µ –≤–Ω–∏–º–∞–Ω–∏—è –Ω–∞ —Ç–æ, —á—Ç–æ —Ç–≤–æ—Ä–∏—Ç—Å—è –≤–æ–∫—Ä—É–≥ –≤–∞—Å. –ù–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –¥–æ—Ä–æ–≥—É –≤ –Ω–µ–ø–æ–ª–æ–∂–µ–Ω–Ω–æ–º –º–µ—Å—Ç–µ.",
        "–ù–µ —Å—Ç–æ–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ –≤ —á–µ–º-–ª–∏–±–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ–ø—Ä–∞–≤–¥–∞–Ω–∏—è —Å–≤–æ–∏—Ö –¥—É—Ä–∞—Ü–∫–∏—Ö –ø–æ—Å—Ç—É–ø–∫–æ–≤, –∏–ª–∏, —Ç–æ–≥–æ —Ö—É–∂–µ, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –º–∞–ª–µ–π—à–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –°–¥–µ–ª–∞–π—Ç–µ —Å–µ–≥–æ–¥–Ω—è —á—Ç–æ-–Ω–∏–±—É–¥—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ.",
        "–ù–µ –≤–æ—Å–ø–∞—Ä—è–π—Ç–µ –≤ —Å–≤–æ–∏—Ö –º–µ—á—Ç–∞—Ö –æ—Å–æ–±–µ–Ω–Ω–æ –≤—ã—Å–æ–∫–æ. –°–µ–≥–æ–¥–Ω—è –≤–∞–º —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–æ –±—É–¥–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è. –¢–∞–∫ –∏ –æ—Å—Ç–∞–Ω–µ—Ç–µ—Å—å –≤–∏—Å–µ—Ç—å, –∫–∞–∫ –í–∏–Ω–Ω–∏ –ü—É—Ö –Ω–∞ –≤–æ–∑–¥—É—à–Ω–æ–º —à–∞—Ä–∏–∫–µ. –ê –≤–æ–∫—Ä—É–≥ –ø—á–µ–ª—ã... –ò –≤–Ω–∏–∑, –º–µ–∂–¥—É –ø—Ä–æ—á–∏–º, –ø–∞–¥–∞—Ç—å –±–æ–ª—å–Ω–æ...",
        "–°–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –Ω–µ –±—É–¥–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫–∞–∫-–ª–∏–±–æ –æ–ø—Ä–∞–≤–¥—ã–≤–∞—Ç—å —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è. –í–∞–º –ø—Ä–æ—Å—Ç—è—Ç –≤—Å–µ —á—Ç–æ —É–≥–æ–¥–Ω–æ, —Ö–æ—Ç—è –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª—è—Ç—å —ç—Ç–∏–º, –ø–æ–∂–∞–ª—É–π, –Ω–µ —Å—Ç–æ–∏—Ç.",
        "–°–µ–≥–æ–¥–Ω—è –≤—ã –±—É–¥–µ—Ç–µ —Å–ø–æ–∫–æ–π–Ω—ã, –∫–∞–∫ –¥–æ—Ö–ª—ã–π –ª–µ–≤, —á–µ–º –≤—ã–∑–æ–≤–µ—Ç–µ –≤–æ—Å—Ö–∏—â–µ–Ω–∏–µ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π, –∏–±–æ –≤–æ–∫—Ä—É–≥ —Ç–∞–∫–æ–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç! –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ, –ø—Ä–∞–≤–¥–∞, –Ω–∞–≤–µ—Ä–Ω—è–∫–∞ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–Ω–æ–µ, –Ω–æ –∫—Ç–æ –æ–± —ç—Ç–æ–º –∑–Ω–∞–µ—Ç?",
        "–°–µ–≥–æ–¥–Ω—è, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—è –Ω–∞ –∫–æ–≥–æ-—Ç–æ –∫—Ä–æ–º–µ —Å–µ–±—è, –ø—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –±–æ–ª—å—à–æ–π —Å—É–µ—Ç–µ –∏ –ø—É—Ç–∞–Ω–∏—Ü–µ. –ê –ª—É—á—à–µ –∏ –≤–æ–≤—Å–µ –Ω–µ –ø–æ–ª–∞–≥–∞—Ç—å—Å—è –Ω–∏ –Ω–∞ —á—å—é –ø–æ–º–æ—â—å, —Å–∞–º–æ–º—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –±—É–¥–µ—Ç –ø—Ä–æ—â–µ.",
        "–°–µ–≥–æ–¥–Ω—è –≤—ã –º–æ–∂–µ—Ç–µ –æ–∫–∞–∑–∞—Ç—å—Å—è –æ—Ä—É–¥–∏–µ–º –≤ —á—å–∏—Ö-—Ç–æ —Ä—É–∫–∞—Ö. –í–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏, –ø–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –Ω–µ –≤–≤—è–∑—ã–≤–∞—Ç—å—Å—è –Ω–∏ –≤ –∫–∞–∫–∏–µ –∞–≤–∞–Ω—Ç—é—Ä—ã. –†–∞–∑–≤–ª–µ—á—å—Å—è –º–æ–∂–Ω–æ –∏ –∏–Ω–∞—á–µ.",
        "–°–µ–≥–æ–¥–Ω—è –≤–∞–º, –≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–∏–¥–µ—Ç—Å—è –æ–±—ä—è—Å–Ω—è—Ç—å —Ç–æ–º—É, –∫—Ç–æ –≤–∞–º –¥–æ—Ä–æ–≥, —á—Ç–æ –æ–Ω –≤ —á–µ–º-—Ç–æ –≥–ª—É–±–æ–∫–æ –∑–∞–±–ª—É–∂–¥–∞–µ—Ç—Å—è. –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ - —ç—Ç–æ –Ω–µ–ø—Ä–∏—è—Ç–Ω–æ, –Ω–æ –Ω–µ —Å–º–µ—Ä—Ç–µ–ª—å–Ω–æ.",
        "–°–µ–≥–æ–¥–Ω—è –º–æ–≥—É—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤–∞—Å –∫–∞—Å–∞—Ç—å—Å—è. –¢–æ–ª—å–∫–æ –Ω–µ –≤–ø–∞–¥–∞–π—Ç–µ –ø–æ —ç—Ç–æ–º—É –ø–æ–≤–æ–¥—É –≤ –ø–∞–Ω–∏–∫—É, –∏–Ω–∞—á–µ –≤—ã —Ä–∏—Å–∫—É–µ—Ç–µ –æ—Å—Ç–∞—Ç—å—Å—è –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –Ω–∞–¥–æ–ª–≥–æ.",
        "–ù–∞ –æ–¥–Ω–æ–º –∂–µ–ª–∞–Ω–∏–∏ –¥–∞–ª–µ–∫–æ –Ω–µ —É–µ–¥–µ—à—å, —Ö–æ—Ç—è, –µ—Å–ª–∏ –±—ã –Ω–∞—É—á–∏—Ç—å—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–Ω–µ—Ä–≥–∏—é –∂–µ–ª–∞–Ω–∏–π, —Ç–æ –ø–æ–≤—Å–µ–º–µ—Å—Ç–Ω–æ –æ—Ç–ø–∞–ª–∞ –±—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –≤ –¥–æ–±—ã—á–µ –Ω–µ—Ñ—Ç–∏. –ü—Ä–∏–¥–µ—Ç—Å—è –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è.",
        "–°–µ–≥–æ–¥–Ω—è –≤–∞—Å –±—É–¥—É—Ç –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å –ª–∏—à—å —Ç–µ –ø—Ä–µ–¥–µ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Å–∞–º–∏ —Å–µ–±–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ. –ù–µ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ –æ—Ç–∫—Ä—ã–≤—à–∏–º–∏—Å—è –ø–µ—Ä–µ–¥ –≤–∞–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏.",
        "–°–µ–≥–æ–¥–Ω—è –Ω–µ —Å–∞–º—ã–π –ª—É—á—à–∏–π –¥–µ–Ω—å, —á—Ç–æ–±—ã –ø—ã—Ç–∞—Ç—å—Å—è –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –≤—Ä–µ–¥–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫. –¢–æ–ª—å–∫–æ –∏–∑–º–æ—Ç–∞–µ—Ç–µ—Å—å, —Ç–æ–ª–∫—É –∂–µ - –Ω–µ –±—É–¥–µ—Ç.",
        "–°–µ–≥–æ–¥–Ω—è –≤–∞–º –Ω–µ —Å—Ç–æ–∏—Ç —Å–ª–∏—à–∫–æ–º –≥—Ä–æ–º–∫–æ –∏ —Ä–∞–¥–æ—Å—Ç–Ω–æ —Å–æ–æ–±—â–∞—Ç—å –æ —Å–≤–æ–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö –æ–∫—Ä—É–∂–∞—é—â–∏–º. –ú–æ–∂–µ—Ç–µ –ø–æ–ø–∞—Å—Ç—å –≤ –Ω–µ–ª–æ–≤–∫—É—é —Å–∏—Ç—É–∞—Ü–∏—é.",
        "–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –æ–∑–Ω–∞–º–µ–Ω—É–µ—Ç—Å—è –ø—Ä–∏—Å—Ç—É–ø–æ–º –±—É—Ä–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –≤ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –≤–æ–≤–ª–µ—á–µ–Ω –∫–∞–∂–¥—ã–π, –∫—Ç–æ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –Ω–µ—Å—á–∞—Å—Ç—å–µ –ø–æ–ø–∞—Å—Ç—å—Å—è –≤–∞–º –Ω–∞ –≥–ª–∞–∑–∞. –í—ã —Ä–∏—Å–∫—É–µ—Ç–µ –ø–µ—Ä–µ—É—Ç–æ–º–∏—Ç—å—Å—è.",
        "–í—ã —Å–∫–ª–æ–Ω–Ω—ã –≤–∑–≤–∞–ª–∏–≤–∞—Ç—å –Ω–∞ —Å–≤–æ–∏ –ø–ª–µ—á–∏ –Ω–æ—à—É –≥–æ—Ä–∞–∑–¥–æ –±–æ–ª–µ–µ —Ç—è–∂–∫—É—é, —á–µ–º —Å–ª–µ–¥–æ–≤–∞–ª–æ –±—ã. –ö–æ–≥–¥–∞, –Ω–∞–∫–æ–Ω–µ—Ü, –Ω–∞—Å—Ç—É–ø–∏—Ç –¥–æ–ª–≥–æ–∂–¥–∞–Ω–Ω—ã–π –ø–µ—Ä–µ–∫—É—Ä, –ø–æ–¥—É–º–∞–π—Ç–µ —Ö–æ—Ä–æ—à–µ–Ω—å–∫–æ, –∞ —Å—Ç–æ–∏—Ç –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ?",
        "–ù—ã–Ω—á–µ –≤—ã –±—É–¥–µ—Ç–µ –ø—Ä–µ–∏—Å–ø–æ–ª–Ω–µ–Ω—ã —Ä–µ—à–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∏—á—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–π –Ω–∏–∫–æ–º—É, –≤ —Ç–æ–º —á–∏—Å–ª–µ, –≤–æ–∑–º–æ–∂–Ω–æ, –∏ –≤–∞–º, –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π —Ü–µ–ª–∏. –û–¥–Ω–∞–∫–æ –≥–æ—Ä–µ —Ç–æ–º—É, –∫—Ç–æ –ø–æ—Å–º–µ–µ—Ç —É—Å–æ–º–Ω–∏—Ç—å—Å—è –≤ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –≤–∞—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π.",
        "–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –¥–µ–Ω—å, –∏ –≤–æ –≤—Å–µ–º —Å–ª–µ–¥–æ–≤–∞—Ç—å —Å–≤–æ–µ–º—É –ø–ª–∞–Ω—É. –ò–º–ø—Ä–æ–≤–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è –Ω–µ –±—É–¥—É—Ç —Å–ª–∏—à–∫–æ–º —É–¥–∞—á–Ω—ã.",
        "–°–µ–≥–æ–¥–Ω—è –≤—ã –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é, —Ö–æ—Ç—è —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã —ç—Ç–æ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –∏–º–µ–Ω–Ω–æ —Ç–∞–∫. –í–æ–∑–º–æ–∂–Ω–æ, –≤–∞–º –ø—Ä–∏–¥–µ—Ç—Å—è –∑–∞—Ä—É—á–∏—Ç—å—Å—è –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã.",
        "–°–µ–≥–æ–¥–Ω—è –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–æ–∂–µ—Ç –æ–∫–∞–∑–∞—Ç—å—Å—è –æ—á–µ–Ω—å –ø–µ—Ä–µ–º–µ–Ω—á–∏–≤—ã–º. –í —Å–≤—è–∑–∏ —Å —ç—Ç–∏–º –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–æ–º –¥–µ–Ω—å –ª—É—á—à–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å —Ç–µ–º, –∫—Ç–æ –∫ –≤–∞–º –¥–∞–≤–Ω–æ –ø—Ä–∏–≤—ã–∫ –∏ —Å–ø–æ—Å–æ–±–µ–Ω –≤–∞—Å –ø–æ–Ω—è—Ç—å (—Å –ª—é–±–∏–º–æ–π —Å–æ–±–∞–∫–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä)."
      ];

      return texts[this._getRandom(0, texts.length)];
    },

    _getRandom(from, to) {
      return from + Math.floor(Math.random() * (to - from));
    }
  }
});

const DAY = 1000 * 60 * 60 * 24;
const outbox = createOutbox();

window.APP = new Vue({
  el: "#app",
  data: {
    token: null,
    screen: "main",
    offline: !navigator.onLine,
    loading: null,
    date: new Date(),
    user: {
      hist: {}
    },
    auth: {
      newcomer: false,
      login: null,
      password: null,
      name: null,
      photo: null
    }
  },
  computed: {
    dayIndex: function() {
      return Math.floor(this.date.getTime() / DAY);
    },
    prophecy: function() {
      return this.user.hist[this.dayIndex];
    }
  },
  created() {
    window.addEventListener("online", () => (this.offline = false));
    window.addEventListener("offline", () => (this.offline = true));

    this.token = window.localStorage.getItem("token");

    if (this.token) {
      this.fetchUserData();
    } else {
      this.screen = "auth";
    }
  },
  methods: {
    reset() {
      window.localStorage.removeItem("token");
      this.token = null;
      this.screen = "auth";
    },

    addCurrentProphecy({ roll, text }) {
      this.user.hist[this.dayIndex] = { roll, text, index: this.dayIndex };
    },

    getCurrentProphecy() {
      return this.user.hist[this.dayIndex];
    },

    goDayBack() {
      this.date = new Date(this.date.getTime() - DAY);
    },

    goDayNext() {
      this.date = new Date(this.date.getTime() + DAY);
    },

    handlePhotoChange(photo) {
      this.auth.photo = photo;
    },

    fetchUserData() {
      this.loading = true;

      const userDataUrl = `/user/${this.token}`;

      caches.match(userDataUrl).then(resp => {
        if (!resp) return;

        resp.json().then(user => {
          this.user = user;
        });
      });

      fetch(userDataUrl)
        .then(resp => {
          if (resp.ok) {
            return resp.json();
          } else if (resp.status === 401) {
            this.reset();
          } else {
            // retry();
          }
        })
        .then(user => {
          const currTimestamp = this.user.timestamp || -1;

          if (currTimestamp < user.timestamp) {
            this.user = user;
          }
        })
        .catch(error => {
          console.error(error);
        })
        .finally(() => {
          this.loading = false;
        });
    },

    handleSubmit(e) {
      if (this.auth.newcomer) {
        this.screen = "main"; // –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
      }

      this.loading = true;

      outbox("/auth", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(this.auth)
      })
        .then(resp => {
          if (resp.ok) {
            return resp.json();
          } else if (resp.status === 401) {
            alert("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å");
            this.screen = "auth";
            // alert();
          } else {
            // retry();
          }
        })
        .then(({ token }) => {
          window.localStorage.setItem("token", token);
          this.token = token;

          if (!this.auth.newcomer) {
            this.fetchUserData();
            this.screen = "main";
          }
        })
        .catch(error => {
          console.error(error);
        })
        .finally(() => {
          this.loading = false;
        });
    },

    handleOracle(data) {
      this.addCurrentProphecy(data);

      fetch("/prophecy", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          token: this.token,
          prophecy: this.getCurrentProphecy()
        })
      })
        .then(resp => {
          if (!resp.ok && resp.status === 401) {
            this.reset();
          } else {
            // retry();
          }
        })
        .catch(error => {
          // retry();
        });
    }
  }
});
